#!/usr/bin/env python

Import("env")
Import("env_modules")

env_raycast = env_modules.Clone()
env_raycast_sse42 = env_raycast.Clone()
env_raycast_avx = env_raycast.Clone()
env_raycast_avx2 = env_raycast.Clone()
env_raycast_avx512f = env_raycast.Clone()

# Thirdparty source files

thirdparty_obj = []

if env["builtin_embree"]:
    thirdparty_dir = "#thirdparty/embree/"

    embree_src = [
        "common/sys/sysinfo.cpp",
        "common/sys/alloc.cpp",
        "common/sys/filename.cpp",
        "common/sys/library.cpp",
        "common/sys/thread.cpp",
        "common/sys/string.cpp",
        "common/sys/regression.cpp",
        "common/sys/mutex.cpp",
        "common/sys/condition.cpp",
        "common/sys/barrier.cpp",
        "common/math/constants.cpp",
        "common/simd/sse.cpp",
        "common/lexers/stringstream.cpp",
        "common/lexers/tokenstream.cpp",
        "common/tasking/taskschedulerinternal.cpp",
        "kernels/common/device.cpp",
        "kernels/common/stat.cpp",
        "kernels/common/acceln.cpp",
        "kernels/common/accelset.cpp",
        "kernels/common/state.cpp",
        "kernels/common/rtcore.cpp",
        "kernels/common/rtcore_builder.cpp",
        "kernels/common/scene.cpp",
        "kernels/common/alloc.cpp",
        "kernels/common/geometry.cpp",
        "kernels/common/scene_user_geometry.cpp",
        "kernels/common/scene_instance.cpp",
        "kernels/common/scene_triangle_mesh.cpp",
        "kernels/common/scene_quad_mesh.cpp",
        "kernels/common/scene_curves.cpp",
        "kernels/common/scene_line_segments.cpp",
        "kernels/common/scene_grid_mesh.cpp",
        "kernels/common/scene_points.cpp",
        "kernels/common/motion_derivative.cpp",
        "kernels/subdiv/bezier_curve.cpp",
        "kernels/subdiv/bspline_curve.cpp",
        "kernels/subdiv/catmullrom_curve.cpp",
        "kernels/geometry/primitive4.cpp",
        "kernels/geometry/instance_intersector.cpp",
        "kernels/geometry/curve_intersector_virtual_4v.cpp",
        "kernels/geometry/curve_intersector_virtual_4i.cpp",
        "kernels/geometry/curve_intersector_virtual_4i_mb.cpp",
        "kernels/geometry/curve_intersector_virtual_8v.cpp",
        "kernels/geometry/curve_intersector_virtual_8i.cpp",
        "kernels/geometry/curve_intersector_virtual_8i_mb.cpp",
        "kernels/builders/primrefgen.cpp",
        "kernels/bvh/bvh.cpp",
        "kernels/bvh/bvh_statistics.cpp",
        "kernels/bvh/bvh4_factory.cpp",
        "kernels/bvh/bvh8_factory.cpp",
        "kernels/bvh/bvh_collider.cpp",
        "kernels/bvh/bvh_rotate.cpp",
        "kernels/bvh/bvh_refit.cpp",
        "kernels/bvh/bvh_builder.cpp",
        "kernels/bvh/bvh_builder_hair.cpp",
        "kernels/bvh/bvh_builder_hair_mb.cpp",
        "kernels/bvh/bvh_builder_morton.cpp",
        "kernels/bvh/bvh_builder_sah.cpp",
        "kernels/bvh/bvh_builder_sah_spatial.cpp",
        "kernels/bvh/bvh_builder_sah_mb.cpp",
        "kernels/bvh/bvh_builder_twolevel.cpp",
        "kernels/bvh/bvh_intersector1_bvh4.cpp",
        "kernels/bvh/bvh_intersector_hybrid4_bvh4.cpp",
        "kernels/bvh/bvh_intersector_stream_bvh4.cpp",
        "kernels/bvh/bvh_intersector_stream_filters.cpp",
    ]
    
    embree_sse42_src = [
        "kernels/geometry/instance_intersector.cpp",
        "kernels/geometry/curve_intersector_virtual_4v.cpp",
        "kernels/geometry/curve_intersector_virtual_4i.cpp",
        "kernels/geometry/curve_intersector_virtual_4i_mb.cpp",
        "kernels/geometry/curve_intersector_virtual_8v.cpp",
        "kernels/geometry/curve_intersector_virtual_8i.cpp",
        "kernels/geometry/curve_intersector_virtual_8i_mb.cpp",
        "kernels/bvh/bvh_intersector1_bvh4.cpp",
        "kernels/common/scene_user_geometry.cpp",
        "kernels/common/scene_instance.cpp",
        "kernels/common/scene_triangle_mesh.cpp",
        "kernels/common/scene_quad_mesh.cpp",
        "kernels/common/scene_curves.cpp",
        "kernels/common/scene_line_segments.cpp",
        "kernels/common/scene_grid_mesh.cpp",
        "kernels/common/scene_points.cpp",
        "kernels/bvh/bvh_collider.cpp",
        "kernels/bvh/bvh_refit.cpp",
        "kernels/bvh/bvh_builder.cpp",
        "kernels/bvh/bvh_builder_hair.cpp",
        "kernels/bvh/bvh_builder_hair_mb.cpp",
        "kernels/bvh/bvh_builder_sah.cpp",
        "kernels/bvh/bvh_builder_sah_spatial.cpp",
        "kernels/bvh/bvh_builder_sah_mb.cpp",
        "kernels/bvh/bvh_builder_twolevel.cpp",
        "kernels/bvh/bvh_builder_morton.cpp",
        "kernels/bvh/bvh_rotate.cpp",
        "kernels/builders/primrefgen.cpp",
        "kernels/bvh/bvh_intersector_hybrid4_bvh4.cpp",
        "kernels/bvh/bvh_intersector_stream_bvh4.cpp",
        "kernels/bvh/bvh_intersector_stream_filters.cpp",
    ]
    
    embree_avx_src = embree_sse42_src + [
        "kernels/geometry/primitive8.cpp",
        "kernels/bvh/bvh_intersector1_bvh8.cpp",
        "kernels/bvh/bvh.cpp",
        "kernels/bvh/bvh_statistics.cpp",
        "kernels/bvh/bvh_intersector_hybrid8_bvh4.cpp",
        "kernels/bvh/bvh_intersector_hybrid4_bvh8.cpp",
        "kernels/bvh/bvh_intersector_hybrid8_bvh8.cpp",
        "kernels/bvh/bvh_intersector_stream_bvh8.cpp",
    ]
    
    embree_avx2_src = embree_avx_src + [
    ]
    
    embree_avx512f_src = embree_avx2_src + [
        "kernels/bvh/bvh_intersector_hybrid16_bvh8.cpp",
        "kernels/bvh/bvh_intersector_hybrid16_bvh4.cpp",
    ]

    thirdparty_sources = [thirdparty_dir + file for file in embree_src]
    thirdparty_sources_sse42 = [thirdparty_dir + file for file in embree_sse42_src]
    thirdparty_sources_avx = [thirdparty_dir + file for file in embree_avx_src]
    thirdparty_sources_avx2 = [thirdparty_dir + file for file in embree_avx2_src]
    thirdparty_sources_avx512f = [thirdparty_dir + file for file in embree_avx512f_src]

    if env["use_avx512f"]:
        for p in ["-msse2", "-mxsave", "-msse3", "-mssse3", "-msse4.1", "-msse4.2", "-mpopcnt", "-mavx", "-mfma", "-mavx2", "-mlzcnt", "-mbmi2", "-mavx512f", "-mavx512dq"]:
            env_raycast["CFLAGS"].remove(p)
            env_raycast["CXXFLAGS"].remove(p)
            env_raycast_sse42["CFLAGS"].remove(p)
            env_raycast_sse42["CXXFLAGS"].remove(p)
            env_raycast_avx["CFLAGS"].remove(p)
            env_raycast_avx["CXXFLAGS"].remove(p)
            env_raycast_avx2["CFLAGS"].remove(p)
            env_raycast_avx2["CXXFLAGS"].remove(p)
            env_raycast_avx512f["CFLAGS"].remove(p)
            env_raycast_avx512f["CXXFLAGS"].remove(p)
    elif env["use_avx2"]:
        for p in ["-msse2", "-mxsave", "-msse3", "-mssse3", "-msse4.1", "-msse4.2", "-mpopcnt", "-mavx", "-mfma", "-mavx2", "-mlzcnt", "-mbmi2"]:
            env_raycast["CFLAGS"].remove(p)
            env_raycast["CXXFLAGS"].remove(p)
            env_raycast_sse42["CFLAGS"].remove(p)
            env_raycast_sse42["CXXFLAGS"].remove(p)
            env_raycast_avx["CFLAGS"].remove(p)
            env_raycast_avx["CXXFLAGS"].remove(p)
            env_raycast_avx2["CFLAGS"].remove(p)
            env_raycast_avx2["CXXFLAGS"].remove(p)
            env_raycast_avx512f["CFLAGS"].remove(p)
            env_raycast_avx512f["CXXFLAGS"].remove(p)
    elif env["use_avx"]:
        for p in ["-msse2", "-mxsave", "-msse3", "-mssse3", "-msse4.1", "-msse4.2", "-mpopcnt", "-mavx", "-mfma"]:
            env_raycast["CFLAGS"].remove(p)
            env_raycast["CXXFLAGS"].remove(p)
            env_raycast_sse42["CFLAGS"].remove(p)
            env_raycast_sse42["CXXFLAGS"].remove(p)
            env_raycast_avx["CFLAGS"].remove(p)
            env_raycast_avx["CXXFLAGS"].remove(p)
            env_raycast_avx2["CFLAGS"].remove(p)
            env_raycast_avx2["CXXFLAGS"].remove(p)
            env_raycast_avx512f["CFLAGS"].remove(p)
            env_raycast_avx512f["CXXFLAGS"].remove(p)
    elif env["use_sse42"]:
        for p in ["-msse2", "-mxsave", "-msse3", "-mssse3", "-msse4.1", "-msse4.2", "-mpopcnt"]:
            env_raycast["CFLAGS"].remove(p)
            env_raycast["CXXFLAGS"].remove(p)
            env_raycast_sse42["CFLAGS"].remove(p)
            env_raycast_sse42["CXXFLAGS"].remove(p)
            env_raycast_avx["CFLAGS"].remove(p)
            env_raycast_avx["CXXFLAGS"].remove(p)
            env_raycast_avx2["CFLAGS"].remove(p)
            env_raycast_avx2["CXXFLAGS"].remove(p)
            env_raycast_avx512f["CFLAGS"].remove(p)
            env_raycast_avx512f["CXXFLAGS"].remove(p)

    env_raycast.Prepend(CPPPATH=[thirdparty_dir, thirdparty_dir + "include"])
    env_raycast.Append(CPPDEFINES=["EMBREE_TARGET_SSE2", "EMBREE_LOWEST_ISA", "TASKING_INTERNAL", "NDEBUG"])
    if env["bits"] == "64":
        env_raycast.Append(CPPDEFINES=["__X86_64__", "__64BIT__", "EMBREE_TARGET_SSE42", "EMBREE_TARGET_AVX", "EMBREE_TARGET_AVX2", "EMBREE_TARGET_AVX512F"])
    env_raycast_sse42.Prepend(CPPPATH=[thirdparty_dir, thirdparty_dir + "include"])
    env_raycast_sse42.Append(CPPDEFINES=["EMBREE_TARGET_SSE42", "__X86_64__", "__64BIT__", "TASKING_INTERNAL", "NDEBUG"])
    env_raycast_avx.Prepend(CPPPATH=[thirdparty_dir, thirdparty_dir + "include"])
    env_raycast_avx.Append(CPPDEFINES=["EMBREE_TARGET_AVX", "__X86_64__", "__64BIT__", "TASKING_INTERNAL", "NDEBUG"])
    env_raycast_avx2.Prepend(CPPPATH=[thirdparty_dir, thirdparty_dir + "include"])
    env_raycast_avx2.Append(CPPDEFINES=["EMBREE_TARGET_AVX2", "__X86_64__", "__64BIT__", "TASKING_INTERNAL", "NDEBUG"])
    env_raycast_avx512f.Prepend(CPPPATH=[thirdparty_dir, thirdparty_dir + "include"])
    env_raycast_avx512f.Append(CPPDEFINES=["EMBREE_TARGET_AVX512F", "__X86_64__", "__64BIT__", "TASKING_INTERNAL", "NDEBUG"])
        
    if not env.msvc and env["use_llvm"]:
        #if env["arch"] in ["x86", "x86_64"]:
        env_raycast.Prepend(CFLAGS=["-msse2", "-mxsave"])
        env_raycast.Prepend(CXXFLAGS=["-msse2", "-mxsave"])
        env_raycast_sse42.Prepend(CFLAGS=["-msse2", "-mxsave", "-msse3", "-mssse3", "-msse4.1", "-msse4.2", "-mpopcnt"])
        env_raycast_sse42.Prepend(CXXFLAGS=["-msse2", "-mxsave", "-msse3", "-mssse3", "-msse4.1", "-msse4.2", "-mpopcnt"])
        env_raycast_avx.Prepend(CFLAGS=["-msse2", "-mxsave", "-msse3", "-mssse3", "-msse4.1", "-msse4.2", "-mpopcnt", "-mavx", "-mfma"])
        env_raycast_avx.Prepend(CXXFLAGS=["-msse2", "-mxsave", "-msse3", "-mssse3", "-msse4.1", "-msse4.2", "-mpopcnt", "-mavx", "-mfma"])
        env_raycast_avx2.Prepend(CFLAGS=["-msse2", "-mxsave", "-msse3", "-mssse3", "-msse4.1", "-msse4.2", "-mpopcnt", "-mavx", "-mfma", "-mavx2", "-mlzcnt", "-mbmi2"])
        env_raycast_avx2.Prepend(CXXFLAGS=["-msse2", "-mxsave", "-msse3", "-mssse3", "-msse4.1", "-msse4.2", "-mpopcnt", "-mavx", "-mfma", "-mavx2", "-mlzcnt", "-mbmi2"])
        env_raycast_avx512f.Prepend(CFLAGS=["-msse2", "-mxsave", "-msse3", "-mssse3", "-msse4.1", "-msse4.2", "-mpopcnt", "-mavx", "-mfma", "-mavx2", "-mlzcnt", "-mbmi2", "-mavx512f", "-mavx512dq"])
        env_raycast_avx512f.Prepend(CXXFLAGS=["-msse2", "-mxsave", "-msse3", "-mssse3", "-msse4.1", "-msse4.2", "-mpopcnt", "-mavx", "-mfma", "-mavx2", "-mlzcnt", "-mbmi2", "-mavx512f", "-mavx512dq"])

        if env["platform"] == "windows":
            env_raycast.Append(CFLAGS=["-mstackrealign"])
            env_raycast.Append(CXXFLAGS=["-mstackrealign"])
            env_raycast_sse42.Append(CFLAGS=["-mstackrealign"])
            env_raycast_sse42.Append(CXXFLAGS=["-mstackrealign"])
            env_raycast_avx.Append(CFLAGS=["-mstackrealign"])
            env_raycast_avx.Append(CXXFLAGS=["-mstackrealign"])
            env_raycast_avx2.Append(CFLAGS=["-mstackrealign"])
            env_raycast_avx2.Append(CXXFLAGS=["-mstackrealign"])
            env_raycast_avx512f.Append(CFLAGS=["-mstackrealign"])
            env_raycast_avx512f.Append(CXXFLAGS=["-mstackrealign"])
        
    env_raycast_sse42["OBJSUFFIX"] = ".sse42" + env_raycast_sse42["OBJSUFFIX"]
    env_raycast_avx["OBJSUFFIX"] = ".avx" + env_raycast_avx["OBJSUFFIX"]
    env_raycast_avx2["OBJSUFFIX"] = ".avx2" + env_raycast_avx2["OBJSUFFIX"]
    env_raycast_avx512f["OBJSUFFIX"] = ".avx512" + env_raycast_avx512f["OBJSUFFIX"]

    if env["platform"] == "windows":
        if env.msvc:
            env.Append(LINKFLAGS=["psapi.lib"])
        else:
            env.Append(LIBS=["psapi"])

    env_thirdparty = env_raycast.Clone()
    env_thirdparty.force_optimization_on_debug()
    env_thirdparty.disable_warnings()
    env_thirdparty.add_source_files(thirdparty_obj, thirdparty_sources)

    env_thirdparty_sse42 = env_raycast_sse42.Clone()
    env_thirdparty_sse42.force_optimization_on_debug()
    env_thirdparty_sse42.disable_warnings()
    if env["bits"] == "64":
        env_thirdparty_sse42.add_source_files(thirdparty_obj, thirdparty_sources_sse42)
    
    env_thirdparty_avx = env_raycast_avx.Clone()
    env_thirdparty_avx.force_optimization_on_debug()
    env_thirdparty_avx.disable_warnings()
    if env["bits"] == "64":
        env_thirdparty_avx.add_source_files(thirdparty_obj, thirdparty_sources_avx)

    env_thirdparty_avx2 = env_raycast_avx2.Clone()
    env_thirdparty_avx2.force_optimization_on_debug()
    env_thirdparty_avx2.disable_warnings()
    if env["bits"] == "64":
        env_thirdparty_avx2.add_source_files(thirdparty_obj, thirdparty_sources_avx2)

    env_thirdparty_avx512f = env_raycast_avx512f.Clone()
    env_thirdparty_avx512f.force_optimization_on_debug()
    env_thirdparty_avx512f.disable_warnings()
    if env["bits"] == "64":
        env_thirdparty_avx512f.add_source_files(thirdparty_obj, thirdparty_sources_avx512f)

    if not env["arch"] in ["x86", "x86_64"] or env.msvc:
        # Embree needs those, it will automatically use SSE2NEON in ARM
        env_thirdparty.Append(CPPDEFINES=["__SSE2__", "__SSE__"])

    if not env.msvc:
        env_thirdparty.Append(
            CFLAGS=[
                "-fno-strict-overflow",
                "-fno-delete-null-pointer-checks",
                "-fwrapv",
                "-fsigned-char",
                "-fno-strict-aliasing",
                "-fno-tree-vectorize",
                "-fvisibility=hidden",
                "-fvisibility-inlines-hidden",
            ]
        )
        env_thirdparty.Append(
            CXXFLAGS=[
                "-fno-strict-overflow",
                "-fno-delete-null-pointer-checks",
                "-fwrapv",
                "-fsigned-char",
                "-fno-strict-aliasing",
                "-fno-tree-vectorize",
                "-fvisibility=hidden",
                "-fvisibility-inlines-hidden",
            ]
        )
        env_thirdparty_sse42.Append(
            CFLAGS=[
                "-fno-strict-overflow",
                "-fno-delete-null-pointer-checks",
                "-fwrapv",
                "-fsigned-char",
                "-fno-strict-aliasing",
                "-fno-tree-vectorize",
                "-fvisibility=hidden",
                "-fvisibility-inlines-hidden",
            ]
        )
        env_thirdparty_sse42.Append(
            CXXFLAGS=[
                "-fno-strict-overflow",
                "-fno-delete-null-pointer-checks",
                "-fwrapv",
                "-fsigned-char",
                "-fno-strict-aliasing",
                "-fno-tree-vectorize",
                "-fvisibility=hidden",
                "-fvisibility-inlines-hidden",
            ]
        )
        env_thirdparty_avx.Append(
            CFLAGS=[
                "-fno-strict-overflow",
                "-fno-delete-null-pointer-checks",
                "-fwrapv",
                "-fsigned-char",
                "-fno-strict-aliasing",
                "-fno-tree-vectorize",
                "-fvisibility=hidden",
                "-fvisibility-inlines-hidden",
            ]
        )
        env_thirdparty_avx.Append(
            CXXFLAGS=[
                "-fno-strict-overflow",
                "-fno-delete-null-pointer-checks",
                "-fwrapv",
                "-fsigned-char",
                "-fno-strict-aliasing",
                "-fno-tree-vectorize",
                "-fvisibility=hidden",
                "-fvisibility-inlines-hidden",
            ]
        )
        env_thirdparty_avx2.Append(
            CFLAGS=[
                "-fno-strict-overflow",
                "-fno-delete-null-pointer-checks",
                "-fwrapv",
                "-fsigned-char",
                "-fno-strict-aliasing",
                "-fno-tree-vectorize",
                "-fvisibility=hidden",
                "-fvisibility-inlines-hidden",
            ]
        )
        env_thirdparty_avx2.Append(
            CXXFLAGS=[
                "-fno-strict-overflow",
                "-fno-delete-null-pointer-checks",
                "-fwrapv",
                "-fsigned-char",
                "-fno-strict-aliasing",
                "-fno-tree-vectorize",
                "-fvisibility=hidden",
                "-fvisibility-inlines-hidden",
            ]
        )
        env_thirdparty_avx512f.Append(
            CFLAGS=[
                "-fno-strict-overflow",
                "-fno-delete-null-pointer-checks",
                "-fwrapv",
                "-fsigned-char",
                "-fno-strict-aliasing",
                "-fno-tree-vectorize",
                "-fvisibility=hidden",
                "-fvisibility-inlines-hidden",
            ]
        )
        env_thirdparty_avx512f.Append(
            CXXFLAGS=[
                "-fno-strict-overflow",
                "-fno-delete-null-pointer-checks",
                "-fwrapv",
                "-fsigned-char",
                "-fno-strict-aliasing",
                "-fno-tree-vectorize",
                "-fvisibility=hidden",
                "-fvisibility-inlines-hidden",
            ]
        )

    env.modules_sources += thirdparty_obj


# Godot source files

module_obj = []

env_raycast.add_source_files(module_obj, "*.cpp")
env.modules_sources += module_obj

# Needed to force rebuilding the module files when the thirdparty library is updated.
env.Depends(module_obj, thirdparty_obj)
